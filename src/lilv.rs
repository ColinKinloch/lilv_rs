/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed1,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: size_t)
                              -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: size_t) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type off_t = __off_t;
pub type ssize_t = isize;
pub type fpos_t = _G_fpos_t;
pub type LV2_Handle = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _LV2_Feature {
    pub URI: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for _LV2_Feature {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LV2_Feature = _LV2_Feature;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _LV2_Descriptor {
    pub URI: *const ::std::os::raw::c_char,
    pub instantiate: ::std::option::Option<unsafe extern "C" fn(descriptor:
                                                                    *const _LV2_Descriptor,
                                                                sample_rate:
                                                                    f64,
                                                                bundle_path:
                                                                    *const ::std::os::raw::c_char,
                                                                features:
                                                                    *const *const LV2_Feature)
                                               -> LV2_Handle>,
    pub connect_port: ::std::option::Option<unsafe extern "C" fn(instance:
                                                                     LV2_Handle,
                                                                 port:
                                                                     uint32_t,
                                                                 data_location:
                                                                     *mut ::std::os::raw::c_void)>,
    pub activate: ::std::option::Option<extern "C" fn(instance: LV2_Handle)>,
    pub run: ::std::option::Option<extern "C" fn(instance: LV2_Handle,
                                                 sample_count: uint32_t)>,
    pub deactivate: ::std::option::Option<extern "C" fn(instance:
                                                            LV2_Handle)>,
    pub cleanup: ::std::option::Option<extern "C" fn(instance: LV2_Handle)>,
    pub extension_data: ::std::option::Option<unsafe extern "C" fn(uri:
                                                                       *const ::std::os::raw::c_char)
                                                  ->
                                                      *const ::std::os::raw::c_void>,
}
impl ::std::default::Default for _LV2_Descriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LV2_Descriptor = _LV2_Descriptor;
pub type LV2_Descriptor_Function =
    ::std::option::Option<extern "C" fn(index: uint32_t)
                              -> *const LV2_Descriptor>;
pub type LV2_Lib_Handle = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct LV2_Lib_Descriptor {
    pub handle: LV2_Lib_Handle,
    pub size: uint32_t,
    pub cleanup: ::std::option::Option<extern "C" fn(handle: LV2_Lib_Handle)>,
    pub get_plugin: ::std::option::Option<extern "C" fn(handle:
                                                            LV2_Lib_Handle,
                                                        index: uint32_t)
                                              -> *const LV2_Descriptor>,
}
impl ::std::default::Default for LV2_Lib_Descriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LV2_Lib_Descriptor_Function =
    ::std::option::Option<unsafe extern "C" fn(bundle_path:
                                                   *const ::std::os::raw::c_char,
                                               features:
                                                   *const *const LV2_Feature)
                              -> *const LV2_Lib_Descriptor>;
pub type LV2_URID_Map_Handle = *mut ::std::os::raw::c_void;
pub type LV2_URID_Unmap_Handle = *mut ::std::os::raw::c_void;
pub type LV2_URID = uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _LV2_URID_Map {
    pub handle: LV2_URID_Map_Handle,
    pub map: ::std::option::Option<unsafe extern "C" fn(handle:
                                                            LV2_URID_Map_Handle,
                                                        uri:
                                                            *const ::std::os::raw::c_char)
                                       -> LV2_URID>,
}
impl ::std::default::Default for _LV2_URID_Map {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LV2_URID_Map = _LV2_URID_Map;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _LV2_URID_Unmap {
    pub handle: LV2_URID_Unmap_Handle,
    pub unmap: ::std::option::Option<extern "C" fn(handle:
                                                       LV2_URID_Unmap_Handle,
                                                   urid: LV2_URID)
                                         -> *const ::std::os::raw::c_char>,
}
impl ::std::default::Default for _LV2_URID_Unmap {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LV2_URID_Unmap = _LV2_URID_Unmap;
pub enum LilvPluginImpl { }
pub type LilvPlugin = LilvPluginImpl;
pub enum LilvPluginClassImpl { }
pub type LilvPluginClass = LilvPluginClassImpl;
pub enum LilvPortImpl { }
pub type LilvPort = LilvPortImpl;
pub enum LilvScalePointImpl { }
pub type LilvScalePoint = LilvScalePointImpl;
pub enum LilvUIImpl { }
pub type LilvUI = LilvUIImpl;
pub enum LilvNodeImpl { }
pub type LilvNode = LilvNodeImpl;
pub enum LilvWorldImpl { }
pub type LilvWorld = LilvWorldImpl;
pub type LilvInstance = LilvInstanceImpl;
pub enum LilvStateImpl { }
pub type LilvState = LilvStateImpl;
pub type LilvIter = ::std::os::raw::c_void;
pub type LilvPluginClasses = ::std::os::raw::c_void;
pub type LilvPlugins = ::std::os::raw::c_void;
pub type LilvScalePoints = ::std::os::raw::c_void;
pub type LilvUIs = ::std::os::raw::c_void;
pub type LilvNodes = ::std::os::raw::c_void;
pub type LilvGetPortValueFunc =
    ::std::option::Option<unsafe extern "C" fn(port_symbol:
                                                   *const ::std::os::raw::c_char,
                                               user_data:
                                                   *mut ::std::os::raw::c_void,
                                               size: *mut uint32_t,
                                               type_: *mut uint32_t)
                              -> *const ::std::os::raw::c_void>;
pub type LilvSetPortValueFunc =
    ::std::option::Option<unsafe extern "C" fn(port_symbol:
                                                   *const ::std::os::raw::c_char,
                                               user_data:
                                                   *mut ::std::os::raw::c_void,
                                               value:
                                                   *const ::std::os::raw::c_void,
                                               size: uint32_t,
                                               type_: uint32_t)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct LilvInstanceImpl {
    pub lv2_descriptor: *const LV2_Descriptor,
    pub lv2_handle: LV2_Handle,
    pub pimpl: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for LilvInstanceImpl {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LilvUISupportedFunc =
    ::std::option::Option<unsafe extern "C" fn(container_type_uri:
                                                   *const ::std::os::raw::c_char,
                                               ui_type_uri:
                                                   *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_uint>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "lilv-0", kind = "dylib")]
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
#[link(name = "lilv-0", kind = "dylib")]
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn lv2_descriptor(index: uint32_t) -> *const LV2_Descriptor;
    pub fn lv2_lib_descriptor(bundle_path: *const ::std::os::raw::c_char,
                              features: *const *const LV2_Feature)
     -> *const LV2_Lib_Descriptor;
    pub fn lilv_uri_to_path(uri: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn lilv_new_uri(world: *mut LilvWorld,
                        uri: *const ::std::os::raw::c_char) -> *mut LilvNode;
    pub fn lilv_new_file_uri(world: *mut LilvWorld,
                             host: *const ::std::os::raw::c_char,
                             path: *const ::std::os::raw::c_char)
     -> *mut LilvNode;
    pub fn lilv_new_string(world: *mut LilvWorld,
                           str: *const ::std::os::raw::c_char)
     -> *mut LilvNode;
    pub fn lilv_new_int(world: *mut LilvWorld, val: ::std::os::raw::c_int)
     -> *mut LilvNode;
    pub fn lilv_new_float(world: *mut LilvWorld, val: f32) -> *mut LilvNode;
    pub fn lilv_new_bool(world: *mut LilvWorld, val: u8) -> *mut LilvNode;
    pub fn lilv_node_free(val: *mut LilvNode);
    pub fn lilv_node_duplicate(val: *const LilvNode) -> *mut LilvNode;
    pub fn lilv_node_equals(value: *const LilvNode, other: *const LilvNode)
     -> u8;
    pub fn lilv_node_get_turtle_token(value: *const LilvNode)
     -> *mut ::std::os::raw::c_char;
    pub fn lilv_node_is_uri(value: *const LilvNode) -> u8;
    pub fn lilv_node_as_uri(value: *const LilvNode)
     -> *const ::std::os::raw::c_char;
    pub fn lilv_node_is_blank(value: *const LilvNode) -> u8;
    pub fn lilv_node_as_blank(value: *const LilvNode)
     -> *const ::std::os::raw::c_char;
    pub fn lilv_node_is_literal(value: *const LilvNode) -> u8;
    pub fn lilv_node_is_string(value: *const LilvNode) -> u8;
    pub fn lilv_node_as_string(value: *const LilvNode)
     -> *const ::std::os::raw::c_char;
    pub fn lilv_node_is_float(value: *const LilvNode) -> u8;
    pub fn lilv_node_as_float(value: *const LilvNode) -> f32;
    pub fn lilv_node_is_int(value: *const LilvNode) -> u8;
    pub fn lilv_node_as_int(value: *const LilvNode) -> ::std::os::raw::c_int;
    pub fn lilv_node_is_bool(value: *const LilvNode) -> u8;
    pub fn lilv_node_as_bool(value: *const LilvNode) -> u8;
    pub fn lilv_plugin_classes_free(collection: *mut LilvPluginClasses);
    pub fn lilv_plugin_classes_size(collection: *const LilvPluginClasses)
     -> ::std::os::raw::c_uint;
    pub fn lilv_plugin_classes_begin(collection: *const LilvPluginClasses)
     -> *mut LilvIter;
    pub fn lilv_plugin_classes_get(collection: *const LilvPluginClasses,
                                   i: *mut LilvIter)
     -> *const LilvPluginClass;
    pub fn lilv_plugin_classes_next(collection: *const LilvPluginClasses,
                                    i: *mut LilvIter) -> *mut LilvIter;
    pub fn lilv_plugin_classes_is_end(collection: *const LilvPluginClasses,
                                      i: *mut LilvIter) -> u8;
    pub fn lilv_plugin_classes_get_by_uri(classes: *const LilvPluginClasses,
                                          uri: *const LilvNode)
     -> *const LilvPluginClass;
    pub fn lilv_scale_points_free(collection: *mut LilvScalePoints);
    pub fn lilv_scale_points_size(collection: *const LilvScalePoints)
     -> ::std::os::raw::c_uint;
    pub fn lilv_scale_points_begin(collection: *const LilvScalePoints)
     -> *mut LilvIter;
    pub fn lilv_scale_points_get(collection: *const LilvScalePoints,
                                 i: *mut LilvIter) -> *const LilvScalePoint;
    pub fn lilv_scale_points_next(collection: *const LilvScalePoints,
                                  i: *mut LilvIter) -> *mut LilvIter;
    pub fn lilv_scale_points_is_end(collection: *const LilvScalePoints,
                                    i: *mut LilvIter) -> u8;
    pub fn lilv_uis_free(collection: *mut LilvUIs);
    pub fn lilv_uis_size(collection: *const LilvUIs)
     -> ::std::os::raw::c_uint;
    pub fn lilv_uis_begin(collection: *const LilvUIs) -> *mut LilvIter;
    pub fn lilv_uis_get(collection: *const LilvUIs, i: *mut LilvIter)
     -> *const LilvUI;
    pub fn lilv_uis_next(collection: *const LilvUIs, i: *mut LilvIter)
     -> *mut LilvIter;
    pub fn lilv_uis_is_end(collection: *const LilvUIs, i: *mut LilvIter)
     -> u8;
    pub fn lilv_uis_get_by_uri(uis: *const LilvUIs, uri: *const LilvNode)
     -> *const LilvUI;
    pub fn lilv_nodes_free(collection: *mut LilvNodes);
    pub fn lilv_nodes_size(collection: *const LilvNodes)
     -> ::std::os::raw::c_uint;
    pub fn lilv_nodes_begin(collection: *const LilvNodes) -> *mut LilvIter;
    pub fn lilv_nodes_get(collection: *const LilvNodes, i: *mut LilvIter)
     -> *const LilvNode;
    pub fn lilv_nodes_next(collection: *const LilvNodes, i: *mut LilvIter)
     -> *mut LilvIter;
    pub fn lilv_nodes_is_end(collection: *const LilvNodes, i: *mut LilvIter)
     -> u8;
    pub fn lilv_nodes_get_first(collection: *const LilvNodes)
     -> *mut LilvNode;
    pub fn lilv_nodes_contains(values: *const LilvNodes,
                               value: *const LilvNode) -> u8;
    pub fn lilv_nodes_merge(a: *const LilvNodes, b: *const LilvNodes)
     -> *mut LilvNodes;
    pub fn lilv_plugins_size(collection: *const LilvPlugins)
     -> ::std::os::raw::c_uint;
    pub fn lilv_plugins_begin(collection: *const LilvPlugins)
     -> *mut LilvIter;
    pub fn lilv_plugins_get(collection: *const LilvPlugins, i: *mut LilvIter)
     -> *const LilvPlugin;
    pub fn lilv_plugins_next(collection: *const LilvPlugins, i: *mut LilvIter)
     -> *mut LilvIter;
    pub fn lilv_plugins_is_end(collection: *const LilvPlugins,
                               i: *mut LilvIter) -> u8;
    pub fn lilv_plugins_get_by_uri(plugins: *const LilvPlugins,
                                   uri: *const LilvNode) -> *const LilvPlugin;
    pub fn lilv_world_new() -> *mut LilvWorld;
    pub fn lilv_world_set_option(world: *mut LilvWorld,
                                 uri: *const ::std::os::raw::c_char,
                                 value: *const LilvNode);
    pub fn lilv_world_free(world: *mut LilvWorld);
    pub fn lilv_world_load_all(world: *mut LilvWorld);
    pub fn lilv_world_load_bundle(world: *mut LilvWorld,
                                  bundle_uri: *mut LilvNode);
    pub fn lilv_world_unload_bundle(world: *mut LilvWorld,
                                    bundle_uri: *mut LilvNode)
     -> ::std::os::raw::c_int;
    pub fn lilv_world_load_resource(world: *mut LilvWorld,
                                    resource: *const LilvNode)
     -> ::std::os::raw::c_int;
    pub fn lilv_world_unload_resource(world: *mut LilvWorld,
                                      resource: *const LilvNode)
     -> ::std::os::raw::c_int;
    pub fn lilv_world_get_plugin_class(world: *const LilvWorld)
     -> *const LilvPluginClass;
    pub fn lilv_world_get_plugin_classes(world: *const LilvWorld)
     -> *const LilvPluginClasses;
    pub fn lilv_world_get_all_plugins(world: *const LilvWorld)
     -> *const LilvPlugins;
    pub fn lilv_world_find_nodes(world: *mut LilvWorld,
                                 subject: *const LilvNode,
                                 predicate: *const LilvNode,
                                 object: *const LilvNode) -> *mut LilvNodes;
    pub fn lilv_world_get(world: *mut LilvWorld, subject: *const LilvNode,
                          predicate: *const LilvNode, object: *const LilvNode)
     -> *mut LilvNode;
    pub fn lilv_world_ask(world: *mut LilvWorld, subject: *const LilvNode,
                          predicate: *const LilvNode, object: *const LilvNode)
     -> u8;
    pub fn lilv_plugin_verify(plugin: *const LilvPlugin) -> u8;
    pub fn lilv_plugin_get_uri(plugin: *const LilvPlugin) -> *const LilvNode;
    pub fn lilv_plugin_get_bundle_uri(plugin: *const LilvPlugin)
     -> *const LilvNode;
    pub fn lilv_plugin_get_data_uris(plugin: *const LilvPlugin)
     -> *const LilvNodes;
    pub fn lilv_plugin_get_library_uri(plugin: *const LilvPlugin)
     -> *const LilvNode;
    pub fn lilv_plugin_get_name(plugin: *const LilvPlugin) -> *mut LilvNode;
    pub fn lilv_plugin_get_class(plugin: *const LilvPlugin)
     -> *const LilvPluginClass;
    pub fn lilv_plugin_get_value(p: *const LilvPlugin,
                                 predicate: *const LilvNode)
     -> *mut LilvNodes;
    pub fn lilv_plugin_has_feature(p: *const LilvPlugin,
                                   feature_uri: *const LilvNode) -> u8;
    pub fn lilv_plugin_get_supported_features(p: *const LilvPlugin)
     -> *mut LilvNodes;
    pub fn lilv_plugin_get_required_features(p: *const LilvPlugin)
     -> *mut LilvNodes;
    pub fn lilv_plugin_get_optional_features(p: *const LilvPlugin)
     -> *mut LilvNodes;
    pub fn lilv_plugin_has_extension_data(p: *const LilvPlugin,
                                          uri: *const LilvNode) -> u8;
    pub fn lilv_plugin_get_extension_data(p: *const LilvPlugin)
     -> *mut LilvNodes;
    pub fn lilv_plugin_get_num_ports(p: *const LilvPlugin) -> uint32_t;
    pub fn lilv_plugin_get_port_ranges_float(p: *const LilvPlugin,
                                             min_values: *mut f32,
                                             max_values: *mut f32,
                                             def_values: *mut f32);
    pub fn lilv_plugin_get_num_ports_of_class(p: *const LilvPlugin,
                                              class_1: *const LilvNode, ...)
     -> uint32_t;
    pub fn lilv_plugin_get_num_ports_of_class_va(p: *const LilvPlugin,
                                                 class_1: *const LilvNode,
                                                 args: va_list) -> uint32_t;
    pub fn lilv_plugin_has_latency(p: *const LilvPlugin) -> u8;
    pub fn lilv_plugin_get_latency_port_index(p: *const LilvPlugin)
     -> uint32_t;
    pub fn lilv_plugin_get_port_by_index(plugin: *const LilvPlugin,
                                         index: uint32_t) -> *const LilvPort;
    pub fn lilv_plugin_get_port_by_symbol(plugin: *const LilvPlugin,
                                          symbol: *const LilvNode)
     -> *const LilvPort;
    pub fn lilv_plugin_get_port_by_designation(plugin: *const LilvPlugin,
                                               port_class: *const LilvNode,
                                               designation: *const LilvNode)
     -> *const LilvPort;
    pub fn lilv_plugin_get_project(plugin: *const LilvPlugin)
     -> *mut LilvNode;
    pub fn lilv_plugin_get_author_name(plugin: *const LilvPlugin)
     -> *mut LilvNode;
    pub fn lilv_plugin_get_author_email(plugin: *const LilvPlugin)
     -> *mut LilvNode;
    pub fn lilv_plugin_get_author_homepage(plugin: *const LilvPlugin)
     -> *mut LilvNode;
    pub fn lilv_plugin_is_replaced(plugin: *const LilvPlugin) -> u8;
    pub fn lilv_plugin_write_description(world: *mut LilvWorld,
                                         plugin: *const LilvPlugin,
                                         base_uri: *const LilvNode,
                                         plugin_file: *mut FILE);
    pub fn lilv_plugin_write_manifest_entry(world: *mut LilvWorld,
                                            plugin: *const LilvPlugin,
                                            base_uri: *const LilvNode,
                                            manifest_file: *mut FILE,
                                            plugin_file_path:
                                                *const ::std::os::raw::c_char);
    pub fn lilv_plugin_get_related(plugin: *const LilvPlugin,
                                   type_: *const LilvNode) -> *mut LilvNodes;
    pub fn lilv_port_get_node(plugin: *const LilvPlugin,
                              port: *const LilvPort) -> *const LilvNode;
    pub fn lilv_port_get_value(plugin: *const LilvPlugin,
                               port: *const LilvPort,
                               predicate: *const LilvNode) -> *mut LilvNodes;
    pub fn lilv_port_get(plugin: *const LilvPlugin, port: *const LilvPort,
                         predicate: *const LilvNode) -> *mut LilvNode;
    pub fn lilv_port_get_properties(plugin: *const LilvPlugin,
                                    port: *const LilvPort) -> *mut LilvNodes;
    pub fn lilv_port_has_property(p: *const LilvPlugin, port: *const LilvPort,
                                  property_uri: *const LilvNode) -> u8;
    pub fn lilv_port_supports_event(p: *const LilvPlugin,
                                    port: *const LilvPort,
                                    event_type: *const LilvNode) -> u8;
    pub fn lilv_port_get_index(plugin: *const LilvPlugin,
                               port: *const LilvPort) -> uint32_t;
    pub fn lilv_port_get_symbol(plugin: *const LilvPlugin,
                                port: *const LilvPort) -> *const LilvNode;
    pub fn lilv_port_get_name(plugin: *const LilvPlugin,
                              port: *const LilvPort) -> *mut LilvNode;
    pub fn lilv_port_get_classes(plugin: *const LilvPlugin,
                                 port: *const LilvPort) -> *const LilvNodes;
    pub fn lilv_port_is_a(plugin: *const LilvPlugin, port: *const LilvPort,
                          port_class: *const LilvNode) -> u8;
    pub fn lilv_port_get_range(plugin: *const LilvPlugin,
                               port: *const LilvPort,
                               deflt: *mut *mut LilvNode,
                               min: *mut *mut LilvNode,
                               max: *mut *mut LilvNode);
    pub fn lilv_port_get_scale_points(plugin: *const LilvPlugin,
                                      port: *const LilvPort)
     -> *mut LilvScalePoints;
    pub fn lilv_state_new_from_world(world: *mut LilvWorld,
                                     map: *mut LV2_URID_Map,
                                     subject: *const LilvNode)
     -> *mut LilvState;
    pub fn lilv_state_new_from_file(world: *mut LilvWorld,
                                    map: *mut LV2_URID_Map,
                                    subject: *const LilvNode,
                                    path: *const ::std::os::raw::c_char)
     -> *mut LilvState;
    pub fn lilv_state_new_from_string(world: *mut LilvWorld,
                                      map: *mut LV2_URID_Map,
                                      str: *const ::std::os::raw::c_char)
     -> *mut LilvState;
    pub fn lilv_state_new_from_instance(plugin: *const LilvPlugin,
                                        instance: *mut LilvInstance,
                                        map: *mut LV2_URID_Map,
                                        file_dir:
                                            *const ::std::os::raw::c_char,
                                        copy_dir:
                                            *const ::std::os::raw::c_char,
                                        link_dir:
                                            *const ::std::os::raw::c_char,
                                        save_dir:
                                            *const ::std::os::raw::c_char,
                                        get_value: LilvGetPortValueFunc,
                                        user_data:
                                            *mut ::std::os::raw::c_void,
                                        flags: uint32_t,
                                        features: *const *const LV2_Feature)
     -> *mut LilvState;
    pub fn lilv_state_free(state: *mut LilvState);
    pub fn lilv_state_equals(a: *const LilvState, b: *const LilvState) -> u8;
    pub fn lilv_state_get_num_properties(state: *const LilvState)
     -> ::std::os::raw::c_uint;
    pub fn lilv_state_get_plugin_uri(state: *const LilvState)
     -> *const LilvNode;
    pub fn lilv_state_get_label(state: *const LilvState)
     -> *const ::std::os::raw::c_char;
    pub fn lilv_state_set_label(state: *mut LilvState,
                                label: *const ::std::os::raw::c_char);
    pub fn lilv_state_restore(state: *const LilvState,
                              instance: *mut LilvInstance,
                              set_value: LilvSetPortValueFunc,
                              user_data: *mut ::std::os::raw::c_void,
                              flags: uint32_t,
                              features: *const *const LV2_Feature);
    pub fn lilv_state_save(world: *mut LilvWorld, map: *mut LV2_URID_Map,
                           unmap: *mut LV2_URID_Unmap,
                           state: *const LilvState,
                           uri: *const ::std::os::raw::c_char,
                           dir: *const ::std::os::raw::c_char,
                           filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn lilv_state_to_string(world: *mut LilvWorld, map: *mut LV2_URID_Map,
                                unmap: *mut LV2_URID_Unmap,
                                state: *const LilvState,
                                uri: *const ::std::os::raw::c_char,
                                base_uri: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn lilv_scale_point_get_label(point: *const LilvScalePoint)
     -> *const LilvNode;
    pub fn lilv_scale_point_get_value(point: *const LilvScalePoint)
     -> *const LilvNode;
    pub fn lilv_plugin_class_get_parent_uri(plugin_class:
                                                *const LilvPluginClass)
     -> *const LilvNode;
    pub fn lilv_plugin_class_get_uri(plugin_class: *const LilvPluginClass)
     -> *const LilvNode;
    pub fn lilv_plugin_class_get_label(plugin_class: *const LilvPluginClass)
     -> *const LilvNode;
    pub fn lilv_plugin_class_get_children(plugin_class:
                                              *const LilvPluginClass)
     -> *mut LilvPluginClasses;
    pub fn lilv_plugin_instantiate(plugin: *const LilvPlugin,
                                   sample_rate: f64,
                                   features: *const *const LV2_Feature)
     -> *mut LilvInstance;
    pub fn lilv_instance_free(instance: *mut LilvInstance);
    pub fn lilv_plugin_get_uis(plugin: *const LilvPlugin) -> *mut LilvUIs;
    pub fn lilv_ui_get_uri(ui: *const LilvUI) -> *const LilvNode;
    pub fn lilv_ui_get_classes(ui: *const LilvUI) -> *const LilvNodes;
    pub fn lilv_ui_is_a(ui: *const LilvUI, class_uri: *const LilvNode) -> u8;
    pub fn lilv_ui_is_supported(ui: *const LilvUI,
                                supported_func: LilvUISupportedFunc,
                                container_type: *const LilvNode,
                                ui_type: *mut *const LilvNode)
     -> ::std::os::raw::c_uint;
    pub fn lilv_ui_get_bundle_uri(ui: *const LilvUI) -> *const LilvNode;
    pub fn lilv_ui_get_binary_uri(ui: *const LilvUI) -> *const LilvNode;
}
